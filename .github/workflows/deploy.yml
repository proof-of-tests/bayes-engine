name: CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to CloudFlare
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Build webapp
        run: nix build .#webapp

      - name: Check if deployment needed (PR Preview)
        if: github.event_name == 'pull_request'
        id: check-deployment
        run: |
          # Extract local content hash
          LOCAL_HASH=$(cat result/assets/content-hash.txt)
          echo "Local content hash: $LOCAL_HASH"

          # Try to fetch production content hash
          PRODUCTION_URL="https://bayes-engine.lemmih.workers.dev/content-hash.txt"
          if PROD_HASH=$(curl -sf "$PRODUCTION_URL" 2>/dev/null); then
            echo "Production content hash: $PROD_HASH"

            if [ "$LOCAL_HASH" = "$PROD_HASH" ]; then
              echo "Content unchanged - skipping deployment"
              echo "deploy=false" >> $GITHUB_OUTPUT
            else
              echo "Content changed - deployment needed"
              echo "deploy=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "Could not fetch production hash - deploying anyway"
            echo "deploy=true" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to CloudFlare Workers (Production)
        if: github.event_name != 'pull_request'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy

      - name: Deploy to CloudFlare Workers (PR Preview)
        if: github.event_name == 'pull_request' && steps.check-deployment.outputs.deploy == 'true'
        id: deploy-preview
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --name bayes-engine-pr-${{ github.event.pull_request.number }}

      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request' && steps.check-deployment.outputs.deploy == 'true'
        uses: actions/github-script@v8
        with:
          script: |
            const prNumber = context.issue.number;
            const previewUrl = '${{ steps.deploy-preview.outputs.deployment-url }}';
            const body = `### 🚀 PR Preview Deployed\n\nYour preview deployment is ready!\n\n**Preview URL:** <a href="${previewUrl}" target="_blank" rel="noopener noreferrer">${previewUrl}</a>\n\nThis preview will be automatically deleted when the PR is closed or merged.`;

            // Check if we already commented
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('PR Preview')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: body,
              });
            }

      - name: Comment PR - Deployment Skipped
        if: github.event_name == 'pull_request' && steps.check-deployment.outputs.deploy == 'false'
        uses: actions/github-script@v8
        with:
          script: |
            const prNumber = context.issue.number;
            const body = `### ⏭️ PR Preview Skipped\n\nNo deployment needed - webapp content unchanged from production.\n\nThe existing production deployment already includes these changes.`;

            // Check if we already commented
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('PR Preview')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: body,
              });
            }
